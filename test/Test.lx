# comment

###
multi-
line
comment
###

import sub.Another;
import sub.Another.helloFromAnotherModule;

using StringTools;

var globalVariable = "this is global";

@[test](123)
def main:
	# semi-colon test
	trace("Hello Laxe!"); trace("Helo Laxe2");

	# bool
	trace(true);

	#number
	trace(123);
	trace(-432);
	trace(3 - 3 * 2);
	trace(3 - 3 * 2 == -3);

	# string
	trace("Hello World");
	trace('Hello ${123}');

	# variable
	const a = 123;
	trace(a * 2);

	var b = "Hello";
	b += " World";
	trace(b);

	# block
	block:
		trace("this is inside block");

	trace(block:
		trace("this is also inside block");
		"this will print outside block";
	)

	# if
	if 3 == 3:
		trace("this should print since 3 equals 3");
	
	# else
	if 1 == 2:
		trace("this should not print");
	else if 2 == 3:
		trace("this should also not print");
	else:
		trace("since everything else is false, this will print");

	# else if
	trace(if false:
		"";
	else if true:
		"if statements are still exprs, but be careful with formatting!";
	else:
		""
	)

	# random
	const ifValue = if Math.random() < 0.33: "one";
	elif Math.random() < 0.5: "two";
	else: "three";

	trace('randomly generated: $ifValue');

	# switch
	const s = 123;
	switch s:
		case 1 | 3 | 5:
			trace("1");
		case 123 if false:
			trace("Found 123 from switch!!");
		case _:
			trace("default case on switch");

	# for
	for i in 12...15:
		trace('for: $i');

	# loop
	var a = "";
	loop:
		a += "a";
		if a.length == 3:
			break;
	trace(a);

	# while
	var i = 1;
	while i <= 3:
		trace('while: ${i++}');

	# runonce while
	runonce while false:
		trace("Run even in false while");
	
	# pass(?)
	if true:
		pass;
	if false:
		pass
	trace("printing underneath empty if");

	# try catch throw
	try:
		throw "test error";
	catch(e: str):
		trace('printing string error: $e');
	catch:
		trace(e);
	
	# expr functions
	const localFunc1 = def(a):
		return a * 2;
	
	trace("this should be 6 -> " + localFunc1(3));

	def localFunc2(a):
		trace("tracing the a in localFUnc2: " + a);
	
	localFunc2("!@#$%^");

	# arrays
	var myArray = [8008, 9009, 100010];
	trace("myArray[1] is " + myArray[1]);

	const aa = new ArrayAccessMe();
	aa[12, 24];

	# tuples
	var t: (int, int, int) = (1, 2, 3);
	trace(t);
	trace(t.1);

	# named tuples
	const namedTuple = returnNamedTuple();
	trace(namedTuple.b);

	takeInNormalTuple(namedTuple);

	const anotherNamedTuple: (b: int, c: int) = namedTuple.unnamed();
	trace(anotherNamedTuple.b);

	# anon structures
	var anonStruct = {
		a: 1,
		b: 2,
		c: 3
	};

	trace("anonStruct.b is " + anonStruct.b);

	# another function
	anotherFunction();

	# global variable
	globalVariable += "!!!";
	trace(globalVariable);

	# multi-file
	sub.Another.helloFromLaxe();
	helloFromAnotherModule();

	# call haxe function
	HaxeTest.helloFromHaxe();

	# test arguments and return
	trace(doMath(123, 321));

	# create class
	var cls = new Sponge();
	cls.hello();
	trace("Added using decor meta var: " + cls.asd);
	cls.bla();

	# create generic class
	new GenericClass<int>(123);
	new GenericClass(100);
	new GenericClass("Hello from generic class!");

	# metadata
	const rtti = haxe.rtti.Rtti.getRtti(Sponge);
	trace(rtti.meta);

	# test decor
	trace(@AddThree 0);
	#trace(@AddFour 100);
	@AddFour 0;
	trace(@Another.AndMore "Dinosaurs");

	# using
	const myStr = "HelloWorld";
	trace(myStr.replace("Hello", "Goodbye"));

	trace(template type: a.$myStr<Int, String>);

	# wrapper (abstract from haxe)
	const supNum: SuperNumber = 1001;
	supNum.printSelf();

	# type alias
	const num: Number = 100000;

	const p = new Point(100, 200);
	trace(p.toString());

	const p2 = new Point("abc", "xyz");
	trace(p2.toString());

	test_haxe_example();

	@CheckIfBlock
	block:
		trace("end of everything");

# args and return types
def doMath(a: int, b: int) -> int:
	# return 
	return a + b;

# inline function
def anotherFunction(): trace("calling from another function");

# named tuple
def returnNamedTuple -> (a: int, b: int):
	return (123, 321);

def takeInNormalTuple(t: (int, int)):
	trace(t);

# normal class
@[:rtti]
@[this is meta](1, 2, 3)
@RenameToSponge
class ClassTest:
	def new: trace("Created ClassTest!");
	def hello -> str: 
		trace("Hello from ClassTest!");
		return "test";

# array access class
class ArrayAccessMe:
	def new: pass
	def arrayAccess(one: int, two: int):
		trace("multiple array access of: " + one + " and " + two);

# generic class
class GenericClass<T>:
	def new(value: T):
		trace('The generic value is $value');

# interface
interface Blaable:
	def bla -> void;

class TestImpl implements Blaable:
	def bla: trace("bla");

# decorators
decor AddThree:
	def onExpr(original: expr) -> expr:
		const str = original.toString();
		return expr.fromString(str + " + 3");

# expr decor
decor AddFour:
	def onExpr(original: expr) -> expr:
		const a = 123;
		const es = [original];
		return template expr: block:
			trace($v{a});
			trace("another thing");

			#$original + 54;

decor CheckIfBlock:
	def onExpr(o: expr) -> expr:
		if o.isBlock():
			return template expr:
				trace("is a block");
				$o;
		return o;

# type-def decor
decor RenameToSponge:
	def onTypeDef(original: typeDef) -> typeDef:
		original.name = "Sponge";
		original.addVar("asd", template expr: 0);
		original.addFunction(template expr: def bla():
			trace("we are within bla");
		);
		return original;

wrapper SuperNumber extends Int from Int to Int:
	inline def new(value: Int):
		this = value;

	inline def printSelf():
		trace("printing from SuperNumber: " + this);

alias type Number = Int;
alias type Point<T> = (T, T);

# ---

def test_haxe_example:
	const playerA = { name: "Simon", move: Paper }
	const playerB = { name: "Nicolas", move: Rock }

	const result = switch [playerA.move, playerB.move]:
		case [Rock, Scissors] |
		     [Paper, Rock] |
		     [Scissors, Paper]: Winner(playerA)

		case [Rock, Paper] |
		     [Paper, Scissors] |
		     [Scissors, Rock]: Winner(playerB)

		case _: Draw

	trace('result: $result')

alias type Player = { name: str, move: Move }

enum Move:
	Rock; Paper; Scissors

enum Result:
	Winner(Player)
	Draw
